[{"/home/jayden/Documents/Website/website/website/src/components/Post.jsx":"1","/home/jayden/Documents/Website/website/website/src/components/HomePage.jsx":"2","/home/jayden/Documents/Website/website/website/src/components/AudioPlayer.jsx":"3","/home/jayden/Documents/Website/website/website/src/components/ReviewPage.jsx":"4","/home/jayden/Documents/Website/website/website/src/index.js":"5","/home/jayden/Documents/Website/website/website/src/App.js":"6","/home/jayden/Documents/Website/website/website/src/components/Underline.jsx":"7"},{"size":1016,"mtime":1614556113862,"results":"8","hashOfConfig":"9"},{"size":1009,"mtime":1616908641733,"results":"10","hashOfConfig":"9"},{"size":2519,"mtime":1615438479336,"results":"11","hashOfConfig":"9"},{"size":11946,"mtime":1616908734491,"results":"12","hashOfConfig":"9"},{"size":500,"mtime":1607660761739,"results":"13","hashOfConfig":"9"},{"size":5749,"mtime":1614555949686,"results":"14","hashOfConfig":"9"},{"size":162,"mtime":1606973388436,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"c2lri2",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/jayden/Documents/Website/website/website/src/components/Post.jsx",[],"/home/jayden/Documents/Website/website/website/src/components/HomePage.jsx",[],"/home/jayden/Documents/Website/website/website/src/components/AudioPlayer.jsx",[],"/home/jayden/Documents/Website/website/website/src/components/ReviewPage.jsx",["31","32","33","34","35","36","37","38"],"import { React, useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/ReviewPage.css';\nimport axios from 'axios';\nimport VideoHeader from './VideoHeader';\nimport InfoBar from './InfoBar';\nimport { useParams } from 'react-router-dom';\nimport JsxParser from 'react-jsx-parser';\nimport Picture from './Picture';\nimport ListItem from './ListItem';\nimport Underline from './Underline';\nimport Quote from './Quote';\nimport Paragraph from './Paragraph';\nimport TitleCard from './TitleCard';\nimport ParticlesBg from 'particles-bg';\nimport Comment from './Comment';\nimport ninjabattler from './images/Ninja placeholder.png'\n\nlet ip;\nlet isLiked = false;\nlet isDisliked = false;\nlet commentContent = '';\nlet userId;\nlet postId;\n\nlet QUOTES = [\n  'Ware wa meshia nari!',\n  \"Falcon... I'm not the only copy of you.\",\n  'This is like taking candy from a baby, which is fine by me',\n  \"I am the Eggman, that's what I am, I am the Eggman, I've got the master plan\",\n  'Zero! You were a Maverick?!',\n  'Poyo!',\n  'You mean... Craymen?!',\n  'Impending doom aproaches',\n  \"But that's what it takes to be infinite!\",\n  \"You there, you're the one they call Dragonborn?\",\n  \"What a fool you are. I'm a god, how can you kill a god? What a grand and intoxicating innocence. How could you be so naive? There is no escape. No recall or intervention can work in this place. Come, lay down your weapons, it is not too late for my mercy\",\n  \"Woomy!\",\n  \"You're dead, your friends are dead, game over\",\n  \"Beadichnoa NiGHTS\"\n]\n\n//Grabs the data of an article based off it's title\nconst getArticleData = async (params, cb) => {\n  try {\n    ip = await axios({ method: 'get', url: `https://api.ipify.org?format=json`, headers: { 'Content-Type': 'application/json' }, })\n    ip = ip.data.ip;\n\n    const res = await axios({ method: 'get', url: `/postData/${params.review}/`, headers: { 'Content-Type': 'application/json' }, })\n    const comments = await axios({ method: 'get', url: `/postData/comments/`, params: { postId: res.data.rows[0].id }, headers: { 'Content-Type': 'application/json' }, })\n    const liked = await axios({ method: 'get', url: `/users/liked/`, params: { ip, postId: res.data.rows[0].id }, headers: { 'Content-Type': 'application/json' } })\n    userId = liked.data.userId\n    postId = res.data.rows[0].id;\n\n    if (liked.data.liked !== undefined) {\n      liked.data.liked.liked === true ? isLiked = true : isDisliked = true;\n    }\n    console.log(comments.data.rows)\n    const data = res.data.rows[0];\n    cb(\n      data.title,\n      data.colour,\n      data.content,\n      data.formatteddate,\n      `${data.category} / ${data.genre}`,\n      data.likes,\n      data.dislikes,\n      data.id,\n      data.video_header,\n      comments.data.rows)\n  }\n  catch (err) {\n    console.log(err);\n  }\n}\n\n//Create a new like and a new user if they don't alreaday exist\nconst like = async (params, cb) => {\n  try {\n    const res = await axios({ method: 'get', url: `/users/like`, params: { ip, like: params.like, postId: params.id }, headers: { 'Content-Type': 'application/json' }, })\n    cb()\n  }\n  catch (err) {\n    console.log(err);\n  }\n}\n\nconst comment = async (params, setCommenting, cb) => {\n  try {\n    setCommenting(true)\n    const res = await axios({ method: 'post', url: `/users/comment`, params: { ip, content: params.content, postId: params.id }, headers: { 'Content-Type': 'application/json' }, })\n    const comments = await axios({ method: 'get', url: `/postData/comments/`, params: { postId: postId }, headers: { 'Content-Type': 'application/json' }, })\n\n    console.log(res)\n    setCommenting(false)\n    cb(comments.data.rows)\n  }\n  catch (err) {\n    console.log(err);\n  }\n}\n\nexport default function PostsPage(props) {\n  const page = this\n\n  const [title, setTitle] = useState('')\n  const [colour, setColour] = useState('')\n  const [content, setContent] = useState('')\n  const [date, setDate] = useState('')\n  const [categoryGenre, setCategoryGenre] = useState('')\n  const [likes, setLikes] = useState(0)\n  const [dislikes, setDislikes] = useState(0)\n  const [id, setId] = useState(0)\n  const [video, setVideo] = useState('')\n  const [comments, setComments] = useState([])\n  const [commenting, setCommenting] = useState(false)\n\n  const params = useParams();\n\n  useEffect(() => {\n    getArticleData(params, (name, colour, content, date, cg, likes, dislikes, id, video, comments) => {\n      setTitle(name);\n      setColour(colour);\n      setContent(content);\n      setDate(date);\n      setCategoryGenre(cg);\n      setLikes(Number(likes));\n      setDislikes(Number(dislikes));\n      setId(id);\n      setVideo(video)\n      setComments(comments)\n    })\n  }, [])\n\n  return (\n    <div id='reviewPage'>\n      {video !== '' ?\n        (<VideoHeader\n          pageColour={colour}\n          title={title}\n          video={video}\n        />)\n        :\n        (<></>)}\n      {content !== '' ?\n        (<InfoBar\n          date={date}\n          categoryGenre={categoryGenre}\n        />)\n        :\n        (<></>)\n      }\n      <div>\n        {content !== '' ?\n          (<>\n            <article className='articleContainer' style={{ boxShadow: `5px 5px 0px ${colour}` }}>\n              <JsxParser\n                components={{ Picture, ListItem, Underline, Quote, Paragraph, TitleCard }}\n\n                jsx={content}\n              />\n            </article>\n            <aside className='commentPanel'>\n              <aside className='likePanel' >\n\n                <button onClick={() => {\n                  like({ like: true, id, }, () => {\n                    isLiked = !isLiked\n                    if (isLiked === true) {\n                      setLikes(likes + 1)\n                    } else {\n                      setLikes(likes - 1)\n                    }\n                    if (isDisliked) {\n                      isDisliked = !isDisliked\n                      setDislikes(dislikes - 1)\n                    }\n                    console.log(isLiked, isDisliked)\n                  })\n                }}\n                  style={{ color: isLiked === true ? colour : '#292929' }}>\n                  <i class=\"far fa-thumbs-up\">{likes}</i>\n\n                </button>\n\n                <div id='likeBar' style={{ backgroundImage: `linear-gradient(90deg, ${colour} ${Math.round(likes / (likes + dislikes)) * 100}%, transparent ${Math.round(likes / (likes + dislikes)) * 100}%)` }}>\n\n                </div>\n\n                <button onClick={() => {\n                  like({ like: false, id, }, () => {\n                    isDisliked = !isDisliked\n                    if (isDisliked === true) {\n                      setDislikes(dislikes + 1)\n                    } else {\n                      setDislikes(dislikes - 1)\n                    }\n                    if (isLiked) {\n                      isLiked = !isLiked\n                      setLikes(likes - 1)\n                    }\n                    console.log(isLiked, isDisliked)\n                  })\n                }}\n                  style={{ color: isDisliked === true ? colour : '#292929' }}>\n                  <i class=\"far fa-thumbs-down\">{dislikes}</i>\n                </button>\n              </aside>\n\n              {commenting === true ?\n                (<>\n                  <p id='commentLoading'>\n                    <img src={ninjabattler} />\n                  </p>\n                </>) :\n                (<>\n                  <textarea\n                    id='commentArea'\n                    name=\"comment\"\n                    placeholder=\"Leave a comment!\"\n                    onChange={(e) => {\n                      commentContent = e.target.value\n                    }}\n                    onFocus={(e) => {\n                      e.target.placeholder = ''\n                    }}\n                    onBlur={(e) => {\n                      e.target.placeholder = 'Leave a comment!'\n                    }}>\n                  </textarea>\n                  <button onClick={() => {\n                    comment({ content: commentContent, id: id }, setCommenting, (newComments) => {\n                      commentContent = ''\n                      setComments(newComments)\n                    })\n                  }}>\n                    <i class=\"fas fa-caret-square-right\"></i>\n                  </button>\n                </>)}\n\n              <div className='comments'>\n                {comments.map((com) => {\n                  console.log(com)\n                  return (<Comment\n                    pageColour={com.user_id === userId ? colour : 'transparent'}\n                    username={com.username.slice(0, 10)}\n                    date={com.formatteddate}\n                    content={com.content}\n                    avatar={com.avatar} />)\n                })}\n              </div>\n            </aside>\n          </>)\n          :\n          (<div id=\"loadingArticle\">\n            <img src={ninjabattler} />\n            <h3>\"{QUOTES[Math.floor(Math.random() * QUOTES.length)]}\"</h3>\n          </div>)}\n      </div>\n      <aside className='commentPanel mobile'>\n        <aside className='likePanel' >\n\n          <button onClick={() => {\n            like({ like: true, id, }, () => {\n              isLiked = !isLiked\n              if (isLiked === true) {\n                setLikes(likes + 1)\n              } else {\n                setLikes(likes - 1)\n              }\n              if (isDisliked) {\n                isDisliked = !isDisliked\n                setDislikes(dislikes - 1)\n              }\n              console.log(isLiked, isDisliked)\n            })\n          }}\n            style={{ color: isLiked === true ? colour : '#292929' }}>\n            <i class=\"far fa-thumbs-up\">{likes}</i>\n\n          </button>\n\n          <div id='likeBar' style={{ backgroundImage: `linear-gradient(90deg, ${colour} ${Math.round(likes / (likes + dislikes)) * 100}%, transparent ${Math.round(likes / (likes + dislikes)) * 100}%)` }}>\n\n          </div>\n\n          <button onClick={() => {\n            like({ like: false, id, }, () => {\n              isDisliked = !isDisliked\n              if (isDisliked === true) {\n                setDislikes(dislikes + 1)\n              } else {\n                setDislikes(dislikes - 1)\n              }\n              if (isLiked) {\n                isLiked = !isLiked\n                setLikes(likes - 1)\n              }\n              console.log(isLiked, isDisliked)\n            })\n          }}\n            style={{ color: isDisliked === true ? colour : '#292929' }}>\n            <i class=\"far fa-thumbs-down\">{dislikes}</i>\n          </button>\n        </aside>\n\n        {commenting === true ?\n          (<>\n            <p id='commentLoading'>\n              <img src={ninjabattler} />\n            </p>\n          </>) :\n          (<>\n            <textarea\n              id='commentArea'\n              name=\"comment\"\n              placeholder=\"Leave a comment!\"\n              onChange={(e) => {\n                commentContent = e.target.value\n              }}\n              onFocus={(e) => {\n                e.target.placeholder = ''\n              }}\n              onBlur={(e) => {\n                e.target.placeholder = 'Leave a comment!'\n              }}>\n            </textarea>\n            <button onClick={() => {\n              comment({ content: commentContent, id: id }, setCommenting, (newComments) => {\n                commentContent = ''\n                setComments(newComments)\n              })\n            }}>\n              <i class=\"fas fa-caret-square-right\"></i>\n            </button>\n          </>)}\n\n        <div className='comments'>\n          {comments.map((com) => {\n            console.log(com)\n            return (<Comment\n              pageColour={com.user_id === userId ? colour : 'transparent'}\n              username={com.username.slice(0, 10)}\n              date={com.formatteddate}\n              content={com.content}\n              avatar={com.avatar} />)\n          })}\n        </div>\n      </aside>\n    </div>\n  )\n}","/home/jayden/Documents/Website/website/website/src/index.js",[],"/home/jayden/Documents/Website/website/website/src/App.js",[],"/home/jayden/Documents/Website/website/website/src/components/Underline.jsx",[],{"ruleId":"39","severity":1,"message":"40","line":2,"column":8,"nodeType":"41","messageId":"42","endLine":2,"endColumn":16},{"ruleId":"39","severity":1,"message":"43","line":15,"column":8,"nodeType":"41","messageId":"42","endLine":15,"endColumn":19},{"ruleId":"39","severity":1,"message":"44","line":80,"column":11,"nodeType":"41","messageId":"42","endLine":80,"endColumn":14},{"ruleId":"39","severity":1,"message":"45","line":104,"column":9,"nodeType":"41","messageId":"42","endLine":104,"endColumn":13},{"ruleId":"46","severity":1,"message":"47","line":133,"column":6,"nodeType":"48","endLine":133,"endColumn":8,"suggestions":"49"},{"ruleId":"50","severity":1,"message":"51","line":213,"column":21,"nodeType":"52","endLine":213,"endColumn":47},{"ruleId":"50","severity":1,"message":"51","line":256,"column":13,"nodeType":"52","endLine":256,"endColumn":39},{"ruleId":"50","severity":1,"message":"51","line":310,"column":15,"nodeType":"52","endLine":310,"endColumn":41},"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","'ParticlesBg' is defined but never used.","'res' is assigned a value but never used.","'page' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'params'. Either include it or remove the dependency array.","ArrayExpression",["53"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"54","fix":"55"},"Update the dependencies array to be: [params]",{"range":"56","text":"57"},[4679,4681],"[params]"]